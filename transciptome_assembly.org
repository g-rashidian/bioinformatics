#+TITLE: Trinity assembly and identification of gene of interest

Task: We have protein sequence of PAX6 from /Esox lucius/ Nothern pike and we
want to identify ortologous gene and protein in our model organism. To do that,
we will use RNA-Seq data to assembly all possible transcripts. Transcript of
interest will be identified using =tblastn=.


** Data:
- RNA-Seq data are in =~/Desktop/bioinformatics_git/data/fastq/=
- create new directory and copy RNA-Seq data:
#+BEGIN_SRC sh
mkdir ~/Desktop/rna-seq
cd ~/Desktop/rna-seq
cp ~/Desktop/bioinformatics/data/fastq/*.fastq .
#+END_SRC


- protein product of genes of interest (PAX6)
#+BEGIN_EXAMPLE
>XP_010874552.1 PREDICTED: paired box protein Pax-6 isoform X3 [Esox lucius]
MPQKEYHNQSTWESGVASMMQNSHSGVNQLGGVFVNGRPLPDTTRQKIVELAHSGARPCDISRILQTHDD
SKVQVLDNENVSNGCVSKILGRYYETGSIRPRAIGGSKPRVATPEVVGKIAQYKRECPSIFAWEIRDRLL
SEGVCTNDNIPSVSAVSVSSINRVLRNLASEKQQMGADGMYDKLRMLNGQTGTWGTRPGWYPGTSVPGQP
SQDGCQSQDGAGENTNSISSNGEDSDETQMRLQLKRKLQRNRTSFTQEQIEALEKEFERTHYPDVFARER
LAAKIDLPEARIQVWFSNRRAKWRREEKLRNQRRQASNSSSHIPISSSFSTSVYQAIPQPATPVSFSSGS
MLGRPDTALTNTYSALPPMPSFTMANNLPMQPSQTSYSCMLPTSPSVNGRSYDTYTPPHMQAHMNSQSMT
TSGTTSTGLISPGVSVPVQVPGGEPDMSQYWSRLQ
#+END_EXAMPLE
save this as =protein_sequence.fasta=

** Running assembly

#+BEGIN_SRC sh
cd ~/Desktop/rna-seq
Trinity --max_memory 2G --seqType fq --left WT_01_R1.fastq  --right WT_01_R2.fastq --output output_directory_trinity --CPU 1
# output from trinity is stored in subdirectory:
cd output_directory_trinity
#+END_SRC

** Running assembly on Metacentrum (alternative)
metacentrum wiki : https://wiki.metacentrum.cz/wiki/Main_Page

*** data transfer
If we need more computation resources, it is preferable to run assembly on
computer cluster. For this exercise we will use Metacentrum. 

First, we need to transfer data from local computer to remote storage. We will
connect to metacentrum frontend (see https://wiki.metacentrum.cz/wiki/Frontend)
using program Filezilla. 
- start Filezilla
- open =File/Site Manager=
- use =New Site= button to set connection:
[[./fig/filezilla_example.png]]

- connect to server
- on remote site create new directory =rna-seq=
- transfer fastq files =WT_01_R1.fastq= and  =WT_01_R2.fastq= using drag and
  drop
*** configuring assembly:
Instruction for assembly must be placed into file which we will upload to
metacentrum server. Use editor and create file =assembly.sh= with following content:

#+BEGIN_SRC bash :tangle scripts/assembly.sh
#PBS -l select=1:ncpus=2:mem=2gb
#PBS -l walltime=2:00:00
# the line above species that we request one computer node with
# 2 processors(cpu) and 2 GB of RAM. computation will take max 2 hrs
pwd                  # show  working directory
cd $PBS_O_WORKDIR    # change directory to initial directory we run qsub comment
pwd                  # show working directory
ls -l                # and its connctent

module add trinity-2.6.5
Trinity --max_memory 2G --seqType fq --left WT_01_R1.fastq  --right WT_01_R2.fastq --output output_directory_trinity --CPU 2

#+END_SRC

transfer resulting file to =rna-seq= directory on remote frontend using filezilla

*** run trinity assembly remotely:
#+BEGIN_SRC bash
ssh frantapepa@skirit.ics.muni.cz
# enter password when prompted
cd rna-seq
qsub assembly.sh 
#+END_SRC
- the ID of job should be return (e.g.Job 10578850.arien-pro.ics.muni.cz)
- status of all running or waiting jobs can be found on
  https://metavo.metacentrum.cz/en/state/index.html in personal view tab
  (running time ~ 13 min)
- output from assembly is writen into =output_directory_trinity= folder.Check if
  output_folder contain file =Trinity.fasta=. Use Filezilla to transfer results
  back to your local computer


#+BEGIN_COMMENT
Explain in detail how metecentrum work

show various statuses of jobs, explain memory/cpu/walltime usage
explain exit status
#+END_COMMENT
** Output of Trinity assembly:
When Trinity completes, it will create a 'Trinity.fasta' output file in the
'trinity_out_dir/' output directory.

Trinity groups transcripts into clusters based on shared sequence content. Such
a transcript cluster is very loosely referred to as a 'gene'. This information
is encoded in the Trinity fasta accession. An example Fasta entry for one of the
transcripts is formatted like so:

#+begin_example
>TRINITY_DN1000_c115_g5_i1 len=247 path=[31015:0-148 23018:149-246]
AATCTTTTTTGGTATTGGCAGTACTGTGCTCTGGGTAGTGATTAGGGCAAAAGAAGACAC
ACAATAAAGAACCAGGTGTTAGACGTCAGCAAGTCAAGGCCTTGGTTCTCAGCAGACAGA
AGACAGCCCTTCTCAATCCTCATCCCTTCCCTGAACAGACATGTCTTCTGCAAGCTTCTC
CAAGTCAGTTGTTCACAGGAACATCATCAGAATAAATTTGAAATTATGATTAGTATCTGA
TAAAGCA
#+end_example
=TRINITY_DN1000_c115_g5_i1= indicates Trinity read cluster
=TRINITY_DN1000_c115=, gene =g5=, and isoform =i1=. Because a given run of
trinity involves many many clusters of reads, each of which are assembled
separately, and because the 'gene' numberings are unique within a given
processed read cluster, the 'gene' identifier should be considered an aggregate
of the read cluster and corresponding gene identifier, which in this case would
be 'TRINITY_DN1000_c115_g5'.

** Indentification of protein of interest using blast
We will create blast databases from trinity assembled transcripts and use
protein sequence as query in =tblastn= search

#+BEGIN_SRC sh
makeblastdb -in Trinity.fasta -dbtype nucl
tblastn -db Trinity.fasta -query protein_sequence.fasta -out blast_output
#+END_SRC

** Inspect output file and extract positive sequence
Program =seqkit= can be use for various manipulations of fasta/fastq files. More
information can be found at https://github.com/shenwei356/seqkit


# TRINITY_DN35_c0_g1_i1 
#+begin_src bash
# show basig information about fasta file:
seqkit stat output_directory_trinity/Trinity.fasta
# extract sequence of interest - you have to replace "seqname" with real name identified using tblatn
cat Trinity.fasta | seqkit grep -r -n -p "seqname" > putative_pax6.fasta
#+end_src

** Get protein sequence using ORF finder:
https://www.ncbi.nlm.nih.gov/orffinder/
* Metacentrum usefull links: 
- list of frontends https://wiki.metacentrum.cz/wiki/Frontend
- example of specifiyng computation job:
  https://wiki.metacentrum.cz/wiki/How_to_compute/Batch_jobs
- how to run interactive jobs:
  https://wiki.metacentrum.cz/wiki/How_to_compute/Interactive_jobs
- how to use modules:
  https://wiki.metacentrum.cz/wiki/How_to_compute/Applications_and_modules
- list of available software:
  https://wiki.metacentrum.cz/wiki/MetaCentrum_Application_List

* How to connect to metacentrum from windows:
ssh protocol is available using Putty program (https://www.putty.org/)

* Trinity installation
#+BEGIN_SRC sh :tangle trinity_installation.sh :tangle-mode (identity #o755)
#!/bin/bash
sudo apt-get install build-essential libz-dev libncurses5-dev jellyfish bowtie ncbi-blast+ python3-numpy python-numpy cmake

cd ~/Downloads
wget https://github.com/samtools/samtools/releases/download/1.3.1/samtools-1.3.1.tar.bz2 -O samtools.tar.bz2
tar -xjvf samtools.tar.bz2
cd samtools-1.3.1
make

sudo make install
cd ~/Downloads

wget https://github.com/COMBINE-lab/salmon/releases/download/v0.9.1/Salmon-0.9.1_linux_x86_64.tar.gz
tar xzfv Salmon-0.9.1_linux_x86_64.tar.gz
cd Salmon-latest_linux_x86_64/bin
sudo ln -s $PWD/salmon /usr/local/bin/salmon
cd ~/Downloads
wget https://github.com/trinityrnaseq/trinityrnaseq/archive/Trinity-v2.8.4.tar.gz
tar zxfv Trinity-v2.8.4.tar.gz
cd trinityrnaseq-Trinity-v2.8.4/
make
sudo ln -s  $PWD/Trinity /usr/local/bin/
# bandage installation
cd ~/Downloads
wget https://github.com/rrwick/Bandage/releases/download/v0.8.1/Bandage_Ubuntu_dynamic_v0_8_1.zip
unzip Bandage_Ubuntu_dynamic_v0_8_1.zip
sudo ln -s $PWD/Bandage /usr/local/bin/
#+END_SRC
