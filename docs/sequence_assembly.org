* Assembly Sanger sequence reads using Staden program 
- Available for Linux, Windows and MacOS - http://staden.sourceforge.net/
- Concise tutorial : https://bioinf.comav.upv.es/courses/intro_bioinf/_downloads/5521cd30ca085b97175a9d32ce58f517/staden_course.pdf
- Detailed manual : http://bioinformatics.se/tools/staden/staden_package_manual.pdf

** main Staden programs: 
*** trev
viewier and editor of trace files
*** pregap4
Pregap is used to process raw traces. It is used to mask all of low quality
sequences, sequencing primers and vector sequences. 
*** gap4
Gap is the Genome Assembly Program â€“ the program which actually assembles your individual fragments
into long contigs. It allows you to edit the assembly, referring back to the starting traces where they
are present. 


** Data for assembly:

data for assembly are located in =~/Desktop/bioinformatics/data/sanger=

* Assembly from short NGS reads using Velvet program - single end reads:
** Installation of necessary programs

#+begin_src bash
mamba create -n assembly -c bioconda jellyfish fastx_toolkit quast bandage samtools
conda activate assembly
#+end_src

** Single-end library
**** Data
The data you will examine is from /Staphylococcus aureus/ USA300 which has a genome of
around 3MB. The reads are Illumina and are unpaired, also known as single-end library. 
The data needed for this section can be obtained from the Sequence Read Archive (SRA). For the
following example use the run data SRR022825 and SRR022823 from the SRA Sample
SRS004748. The SRA experiment could be viewed by setting your browser to the URL:
http://www.ebi.ac.uk/ena/data/view/SRS004748

create directory for assembly:
#+begin_src sh
cd
mkdir ngs_assembly
cd ngs_assembly
#+end_src

data can be obtained directly using either wget command 
#+begin_src sh
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022825/SRR022825.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022823/SRR022823.fastq.gz
#+end_src
or using fastq-dump from NCBI-SRA,  fastq-dump is utility for downloading data from NCBI-SRA database:
#+begin_src sh
fastq-dump --gzip SRR022825
fastq-dump --gzip SRR022823
#+end_src

** Quality control using FASTQC program

   
run fastqc program on illumina reads:
#+begin_src 
fastqc *.fastq.gz
#+end_src

this command will create html reports:
- =SRR022825_fastqc.html=
- =SRR022823_fastqc.html=

Inspect reports. 
- What is the sequence read length?
- how many sequences is in single runs?
- What is the total number of bases

** Estimation of genome size:

We will used kmer-count based estimation of genome size according
http://qb.cshl.edu/genomescope/

We will use Jellyfish program. It is a command-line program that reads FASTA and multi-FASTA files containing DNA sequences. It outputs its k-mer counts in a binary format, which can be translated into a human-readable text format using the "jellyfish dump" command
(https://github.com/gmarcais/Jellyfish)


#+begin_src sh
  # jellyfish needs file in uncompressed format
  zcat SRR022825.fastq.gz > SRR022825.fastq
  zcat SRR022823.fastq.gz > SRR022823.fastq
  # kmer counting (several minutes):
  jellyfish count -C -m 21 -s 100000000 -t 2 *.fastq -o reads.jf
  # create histogram:
  jellyfish histo -t 2 reads.jf > reads.histo
  # inspect kmer count using:
  less reads.histo
  # this file can be also inspected in libreoffice calc or ms excel

  # read.jf is binary format, kmers could be viewed using jellyfish dump command e.g.:
  jellyfish dump -c reads.jf | less
#+end_src
Note: parameter =-s= is Initial hash size - affect memory usage


go to http://qb.cshl.edu/genomescope/ and upload resulting =reads.histo= and
fill correct parameters - *kmer size* and *read length*:

- what is the estimated genome size?

#+begin_comment
Staphylococcus aureus MRSA252, a genome closely related to
the genome that provided the short read data in the earlier sections of this exercise. The sequence
data this time is the fully assembled genome. The genome size is therefore known exactly and is
2,902,619 bp.
# results from previous run:
http://genomescope.org/analysis.php?code=f4vvkosUs4ne9RG1JDFF

#+end_comment

** Assembly 
You are ready to assembly your data with velvet. Velvet has two
main components:
- velveth - used to construct, from raw read data, a dataset organised in the
  fashion expected by the second component, velvetg.
- velvetg - the core of velvet where the de Bruijn graph assembly is built and
  manipulated.

You can always get further information about the usage of both velvet programs by typing velvetg
or velveth in your terminal. 

#+begin_src sh
# make kmer counting
velveth run_25 25 -fastq.gz -short SRR022825.fastq.gz SRR022823.fastq.gz
# explore files in the run_25 directory

# run assembly:
velvetg run_25
#+end_src
explanation:
- =run_25= assembly directory
- =25= hash length(kmer length)
- =-fastq.gz= specifies input format

Explore run_25 directory files:

- =directory/contigs.fa=		: fasta file of contigs longer than twice hash length
- =directory/stats.txt=		: stats file (tab-spaced) useful for determining appropriate coverage cutoff
- =directory/LastGraph=		: special formatted file with all the information on the final graph
- =directory/velvet_asm.afg=	: (if requested) AMOS compatible assembly file
- =Log= information about assembly

** Genome assembly statistics:
Use *Quast* tools to assess quality of assembly : http://quast.sourceforge.net/quast

Upload file contig.fa and run quality assessment. 
- What is the N50
- What is the total lenght of assembly
- How long is the longest contig?
- Considering the amount of input data (read lenght x number of reads), what is
  the sequencing coverage
- Is the total length of genome assembly in agreement with kmer-based estimation
  of genome size?
command line quast:
  #+begin_src 
quast run_25/contigs.fa
  #+end_src
 Assembly graph can be inspected using *Bandage* program . 

*** Optional: 
Results from kmer based analysis suggests, that sequencing coverage is more that
10x and lower frequency kmers are likely erroneous kmers. Excluding such kmers
can improved the assembly. We will rerun velvetg  with =-cov_cutoff 6=  and
=-exp_cov 14=  command line option.

#+begin_src bash
# Make a copy of the run
cp run_25/contigs.fa run_25/contigs.fa.0
velvetg run_25 -cov_cutoff 6 -exp_cov 14 -amos_file yes
#+end_src
=-amos_file yes= option will export velvetg run_25_paired -ins_length 350velvetg run_25_paired -ins_length 350rt results to AMOS format 

#+begin_comment
Results:
Final graph has 4238 nodes and n50 of 4423, max 26428, total 2836372, using 0/5356745 reads
Final graph has 2707 nodes and n50 of 5393, max 26428, total 2827773, using 3916445/5356745 reads
#+end_comment

* Assembly from short NGS reads using Velvet program - pair-end reads:
** paired end data and QC:
The data you will examine is from again from /Staphylococcus aureus/ USA300 .
The reads are Illumina paired end with higher sequence coverage
*** download from NCBI: 
#+begin_src bash
cd 
mkdir ngs_assembly2
cd ngs_assembly2
# get paired end reads
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_2.fastq.gz
# run fastqc program
fastqc *.fastq.gz
#+end_src

** Removing of low quality reads:

Some reads has low quality. We can filter low quality sequences either using
program fastx-toolkit.
Additionally, according *fastqc* report, the first base in reads is biased and and
needs to be removed too.


#+begin_src bash
zcat SRR022852_1.fastq.gz | fastx_trimmer -f 2 -o SRR022852_1_trimmed.fastq
zcat SRR022852_2.fastq.gz | fastx_trimmer -f 2 -o SRR022852_2_trimmed.fastq
# check quality again
fastqc SRR022852_1_trimmed.fastq SRR022852_2_trimmed.fastq
#+end_src

** Assembly

#+begin_src bash
velveth run_25_paired 25 -fastq -shortPaired -separate SRR022852_1_trimmed.fastq SRR022852_2_trimmed.fastq 
velvetg run_25_paired -ins_length 350
#+end_src

** compare paired end assembly with single end assembly
- use *Quast* program (http://quast.sourceforge.net/quast) to calculate basic statistics of assembly and compare it to
  previous assembly from single end Illumina reads
#+begin_src bash
# quast can be run on multiple assemblies
# we will compare assembly from SE reads and PE reads:
quast ngs_assembly/run_25/contigs.fa ngs_assembly2/run_25_paired/contigs.fa -o ngs_assembly2/quast

#+end_src
- use *Bandage* program,
  #+begin_comment
assembly from paired end reads  (also higher coverage) creates single connected components, from single ends assebmly is more fragmented
  #+end_comment

** Align short paired reads to assembly:
We will align original sequence read to resulting genome assembly so we can
explore assembly quality using IGV genomic browser
NOTE : deactivate assembly environment for this step
#+begin_src bash
# create database from contigs 
bowtie2-build  run_25_paired/contigs.fa run_25_paired/contigs.fa
#  map reads to assembly : (~7min)
bowtie2 -p 3 -x run_25_paired/contigs.fa -1 SRR022852_1_trimmed.fastq -2 SRR022852_2_trimmed.fastq > SRR022852.sam
# convert SAM to BAM format (~1min):
samtools view -b SRR022852.sam > SRR022852.bam
# sorting according position 
samtools sort SRR022852.bam > SRR022852_sorted.bam
# create index:
samtools index SRR022852_sorted.bam
#+end_src



*** Visualization of assembly
run IGV program to inspect assembly. In IGV load genome - select contigs.fa
file. Then load read mapping from SRR022852_sorted.bam

Manual for IGV can be found on:
http://software.broadinstitute.org/software/igv/UserGuide.
Explanation of color coding (insert size):
- Insert size: http://software.broadinstitute.org/software/igv/interpreting_insert_size
- Pair orientation: http://software.broadinstitute.org/software/igv/interpreting_pair_orientations



#+begin_comment
- open IGV
- import Genome + bam alignment
- show first contig
- zoom
- by default "color alignment by" Insert size and pair orientation, explain
  - red - insert large than expected
  - blue - insert smaller than expected (see above link to igv help)
 - switch to color by pair orientation only, find incorrect pair
 - switch to view as pairs
 - zoom out and show purple triangles - insertions and deletions
 - explain intervals with removed reads - downsampled for faster visualization
 - show left side of contig (color by pair and size must be on)
 - explain color - mate on other chromosome /contig
 - show other side of contig
 - explain "go to mate" / or split screen
 - show contigs node_439 - right side - there are multiple related contigs through mate
 
 
#+end_comment


** Analyze completeness of assembly by  Busco program:
  #+begin_src bash
# run from run25 and run25_paired directory
conda activate busco
cd ~/ngs_assembly/run_25
busco -i contigs.fa -o busco_output -m genome --auto-lineage-prok
cd ~/ngs_assembly2/run_25_paired/
busco -i contigs.fa -o busco_output -m genome --auto-lineage-prok
# each run will take several minuts to finish
  #+end_src


** How to make assembly on Metacentrum

we need to execute all these commands on Metacentrum:
#+begin_src bash  :tangle scripts/assembly_script1.sh
mkdir ngs_assembly2
cd ngs_assembly2
# get paired end reads
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_2.fastq.gz
zcat SRR022852_1.fastq.gz | fastx_trimmer -f 2 -o SRR022852_1_trimmed.fastq
zcat SRR022852_2.fastq.gz | fastx_trimmer -f 2 -o SRR022852_2_trimmed.fastq
velveth run_25_paired 25 -fastq -shortPaired -separate SRR022852_1_trimmed.fastq SRR022852_2_trimmed.fastq 
velvetg run_25_paired -ins_length 350
#+end_src

We need to also specify computational resources (lines starting with #PBS)

#+begin_src bash :tangle scripts/assembly_script2_pbs.sh
#PBS -N genome_assembly
#PBS -l select=1:ncpus=4:mem=4gb -l walltime=1:00:00
# the line above species that we request one computer node with
# 4 processors(cpu) and 4 GB of RAM. computation will take max 1 hrs
cd /storage/praha1/home/$LOGNAME  # go to your home directory on tarkil
module add velvet-1.2.09
module add fastx-0.0.14

mkdir ngs_assembly
cd ngs_assembly
# get paired end reads
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_2.fastq.gz
zcat SRR022852_1.fastq.gz | fastx_trimmer -f 2 -o SRR022852_1_trimmed.fastq
zcat SRR022852_2.fastq.gz | fastx_trimmer -f 2 -o SRR022852_2_trimmed.fastq
velveth run_25_paired 25 -fastq -shortPaired -separate SRR022852_1_trimmed.fastq SRR022852_2_trimmed.fastq 
velvetg run_25_paired -ins_length 350
#+end_src

 Copy file with script to Metacentrum frontend:
- Use can use program filezilla to transfer data to you home directory =/storage/praha1/home/$LOGNAME=
[[../fig/filezilla_tarkil.png]]
- alternatively copy script file using =scp= command
#+begin_src bash
# replace username with your ctredentials!
scp ./scripts/assembly_script2_pbs.sh username@tarkil.grid.cesnet.cz:/storage/praha1/home/username/
#+end_src

Login to metacentrum front end server:
#+begin_src bash
ssh username@tarkil.grid.cesnet.cz
#+end_src

Now you should be in your home directory which contain also script =assembly_script2_pbs.sh=

Execute assembly by running:
#+begin_src bash
qsub assembly_script2_pbs.sh
#+end_src

status of your submission can be monitored from https://metavo.metacentrum.cz/pbsmon2/user/username

To transfer data back to your local computer, you can use filezilla.

* More info about Metacentrum:
- How to specify parameters for qsub command (qsub assembler) : https://metavo.metacentrum.cz/pbsmon2/qsub_pbspro
- How to use modules: https://wiki.metacentrum.cz/wiki/Application_modules
- Available modules:  https://wiki.metacentrum.cz/wiki/MetaCentrum_Application_List
- https://wiki.metacentrum.cz/wiki/Beginners_guide
- PBS system https://wiki.metacentrum.cz/wiki/About_scheduling_system
- Metacentrum frontends : https://wiki.metacentrum.cz/wiki/Frontend
- your current jobs can be viewed at https://metavo.metacentrum.cz/pbsmon2/user/username

* Using SCRATCH directory
Most application produce some temporary files during the calculation. Scratch directory is disk space where temporary files can be stored.

#+begin_src bash :tangle scripts/assembly_script2_pbs.sh
#PBS -N genome_assembly2
#PBS -l select=1:ncpus=4:mem=4gb:scratch_local=10gb -l walltime=1:00:00
# the line above species that we request one computer node with
# 4 processors(cpu) and 4 GB of RAM. computation will take max 1 hrs
cd /storage/praha1/home/$LOGNAME  # go to your home directory on tarkil
module add velvet-1.2.09
module add fastx-0.0.14

cd $SCRATCH
mkdir ngs_assembly2
cd ngs_assembly2
# get paired end reads
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_1.fastq.gz
wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR022/SRR022852/SRR022852_2.fastq.gz
zcat SRR022852_1.fastq.gz | fastx_trimmer -f 2 -o SRR022852_1_trimmed.fastq
zcat SRR022852_2.fastq.gz | fastx_trimmer -f 2 -o SRR022852_2_trimmed.fastq
velveth run_25_paired 25 -fastq -shortPaired -separate SRR022852_1_trimmed.fastq SRR022852_2_trimmed.fastq 
velvetg run_25_paired -ins_length 350
cp -r ../ngs_assembly2 cd /storage/praha1/home/$LOGNAME/

# clean the SCRATCH directory
clean_scratch
#+end_src




* Example of fastqc on low quality data:
We will explore various NGS data from Sequence read archive using FASTQC
program. For download, we will use =fastq-dump= command:

#+begin_src bash
fastq-dump -X 500000 --split-files  ERR268415
fastq-dump -X 500000 --split-files  SRR453021
fastq-dump -X 500000 --split-files  SRR2911427

fastqc *.fastqc
#+end_src
# each download takes about 2 min.
Inspect resulting html reports

* Use BLAST to find location of genes in the assembly

download these proteins from S.aureus:
- https://www.uniprot.org/uniprot/Q2FUW1.fasta
- https://www.uniprot.org/uniprot/Q7A656.fasta
- https://www.uniprot.org/uniprot/Q8NUJ3.fasta

  
- use wget command to download sequences
- use =cat= to concatenate sequences into single fasta
- run blast on contigs.fa from run25_paired assembly to verify that the genes coding this protein are in the assembly.
  You will need to create blast database first. Then use =tblastn= (query is protein, database is nucleotide)
- what are the properties if the best hits, can you find complete CDS
  

